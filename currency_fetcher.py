import asyncio
import aiohttp
import requests
from bs4 import BeautifulSoup
import yfinance as yf
import re
from typing import Tuple, Optional
from selenium import webdriver
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.common.by import By
from webdriver_manager.chrome import ChromeDriverManager
import time
from selenium.webdriver.chrome.service import Service

async def fetch_rub_to_byn() -> Optional[float]:
    """–§–µ—Ç—á–∏—Ç –∫—É—Ä—Å RUB –∫ BYN —Å —Å–∞–π—Ç–∞ –ê–ª—å—Ñ–∞-–ë–∞–Ω–∫–∞"""
    try:
        # –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
        sources = [
            "https://www.alfabank.by/exchange/cards/"
        ]
        
        for url in sources:
            try:
                print(f"üîÑ –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å RUB/BYN —Å {url}")
                async with aiohttp.ClientSession() as session:
                    async with session.get(url, timeout=10) as response:
                        if response.status == 200:
                            html = await response.text()
                            soup = BeautifulSoup(html, 'html.parser')
                            
                            # –ò—â–µ–º –∫—É—Ä—Å—ã –≤ —Ä–∞–∑–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–∞—Ö
                            patterns = [
                                r'RUB.*?(\d+[.,]\d+)',
                                r'—Ä—É–±–ª—å.*?(\d+[.,]\d+)',
                                r'—Ä–æ—Å—Å–∏–π—Å–∫–∏–π.*?(\d+[.,]\d+)'
                            ]
                            
                            for pattern in patterns:
                                matches = re.findall(pattern, html, re.IGNORECASE)
                                if matches:
                                    rate = float(matches[0].replace(',', '.'))
                                    while rate < 1 and rate < 10:
                                        rate *= 10
                                    print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω –∫—É—Ä—Å RUB/BYN: {rate}")
                                    return rate
                            
                            print(f"‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω—ã –∫—É—Ä—Å—ã –Ω–∞ {url}")
                        else:
                            print(f"‚ö†Ô∏è HTTP {response.status} –¥–ª—è {url}")
                            
            except Exception as e:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ {url}: {e}")
                continue
        
        # –ï—Å–ª–∏ –≤—Å–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
        print("‚ö†Ô∏è –í—Å–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ")
        return 3.66
        
    except Exception as e:
        print(f"‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–µ—Ç—á–∏–Ω–≥–µ RUB/BYN: {e}")
        return 3.66

def fetch_usd_to_kzt_requests() -> float | None:
    """–§–µ—Ç—á–∏—Ç USD/KZT –∏—Å–ø–æ–ª—å–∑—É—è —Ç–æ–ª—å–∫–æ requests (–±–µ–∑ Selenium)"""
    try:
        # –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
        sources = [
            "https://fin24.kz/currency/usd",
            "https://www.nationalbank.kz/ru/exchange-rates"
        ]
        
        for url in sources:
            try:
                print(f"üîÑ –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å USD/KZT —Å {url}")
                headers = {
                    "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36"
                }
                response = requests.get(url, headers=headers, timeout=10)
                
                if response.status_code == 200:
                    html = response.text
                    soup = BeautifulSoup(html, 'html.parser')
                    
                    # –ò—â–µ–º –∫—É—Ä—Å—ã –≤ —Ä–∞–∑–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–∞—Ö
                    patterns = [
                        r'USD.*?(\d+[.,]\d+)',
                        r'–¥–æ–ª–ª–∞—Ä.*?(\d+[.,]\d+)',
                        r'(\d+[.,]\d+).*?—Ç–µ–Ω–≥–µ'
                    ]
                    
                    for pattern in patterns:
                        matches = re.findall(pattern, html, re.IGNORECASE)
                        if matches:
                            rate = float(matches[0].replace(',', '.'))
                            print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω –∫—É—Ä—Å USD/KZT: {rate}")
                            return rate
                    
                    print(f"‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω—ã –∫—É—Ä—Å—ã –Ω–∞ {url}")
                else:
                    print(f"‚ö†Ô∏è HTTP {response.status_code} –¥–ª—è {url}")
                    
            except Exception as e:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ {url}: {e}")
                continue
        
        # –ï—Å–ª–∏ –≤—Å–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
        print("‚ö†Ô∏è –í—Å–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ")
        return 525.0
        
    except Exception as e:
        print(f"‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–µ—Ç—á–∏–Ω–≥–µ USD/KZT: {e}")
        return 525.0

def fetch_usd_to_kzt() -> float | None: 
    """–§–µ—Ç—á–∏—Ç USD/KZT - —Å–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ—Ç requests, –ø–æ—Ç–æ–º Selenium –∫–∞–∫ fallback"""
    # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º requests-based –ø–æ–¥—Ö–æ–¥
    result = fetch_usd_to_kzt_requests()
    if result:
        return result
    
    # –ï—Å–ª–∏ requests –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª, –ø—Ä–æ–±—É–µ–º Selenium (—Ç–æ–ª—å–∫–æ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)
    try:
        print("üîÑ –ü—Ä–æ–±—É–µ–º Selenium –¥–ª—è USD/KZT...")
        url = "https://guide.kaspi.kz/client/ru/app/q1971"
        options = Options()
        options.add_argument("--headless=new")
        options.add_argument("--no-sandbox")
        options.add_argument("--disable-dev-shm-usage")
        options.add_argument("--disable-gpu")
        options.add_argument("--remote-debugging-port=9222")
        service = Service(ChromeDriverManager().install())
        driver = webdriver.Chrome(service=service, options=options)
        try:
            driver.get(url)
            time.sleep(5)
            # –ù–∞–π—Ç–∏ –≤—Å–µ –∫–æ–ª–æ–Ω–∫–∏ "–ü—Ä–æ–¥–∞–∂–∞"
            sale_columns = driver.find_elements(By.XPATH, "//div[contains(@class, 'exchange__column') and .//div[contains(text(), '–ü—Ä–æ–¥–∞–∂–∞')]]")
            if sale_columns:
                # –í–Ω—É—Ç—Ä–∏ –∫–æ–ª–æ–Ω–∫–∏ "–ü—Ä–æ–¥–∞–∂–∞" –Ω–∞–π—Ç–∏ –≤—Å–µ –∑–Ω–∞—á–µ–Ω–∏—è
                sale_items = sale_columns[0].find_elements(By.CLASS_NAME, "exchange__column-item")
                if sale_items:
                    usd_sale = sale_items[4].text.replace(",", ".").strip()
                    value = float(usd_sale)
                    print(f"‚úÖ –ö—É—Ä—Å USD/KZT (–ø—Ä–æ–¥–∞–∂–∞): {value}")
                    return value
                print("‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ–¥—Ö–æ–¥—è—â–µ–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏ USD")
                return None
            print("‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω–∞ –∫–æ–ª–æ–Ω–∫–∞ –ø—Ä–æ–¥–∞–∂–∏ –∏–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ USD")
            return None
        finally:
            driver.quit()
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ Selenium –¥–ª—è USD/KZT: {e}")
        return 525.0  # –î–µ—Ñ–æ–ª—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ


def fetch_byn_to_kzt() -> float | None:
    url = "https://wise.com/gb/currency-converter/byn-to-kzt-rate"
    headers = {
        "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.110 Safari/537.3"
    }
    try:
        resp = requests.get(url, headers=headers, timeout=10)
        if resp.status_code == 200:
            html = resp.text
            soup = BeautifulSoup(html, "html.parser")
            # –ò—â–µ–º –±–ª–æ–∫ —Å –∫—É—Ä—Å–æ–º –≤–∏–¥–∞: Br1.000 BYN = ‚Ç∏160.0 KZT
            match = re.search(r'BYN\s*=\s*‚Ç∏<span[^>]*>([\d.,]+)</span>', html)
            if match:
                rate = float(match.group(1).replace(",", "."))
                print(f"‚úÖ –ö—É—Ä—Å BYN/KZT —Å Wise: {rate}")
                return rate
            # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–± ‚Äî –∏—Å–∫–∞—Ç—å –ø–æ –∫–ª–∞—Å—Å—É
            h3 = soup.find("h3", class_="cc__source-to-target")
            if h3:
                text = h3.get_text()
                match = re.search(r'BYN\s*=\s*‚Ç∏([\d.,]+)', text)
                if match:
                    rate = float(match.group(1).replace(",", "."))
                    print(f"‚úÖ –ö—É—Ä—Å BYN/KZT —Å Wise: {rate}")
                    return rate
        print("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∫—É—Ä—Å BYN/KZT –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ Wise")
        return None
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–µ—Ç—á–∏–Ω–≥–µ BYN/KZT —Å Wise: {e}")
        return None


async def fetch_all_rates() -> Tuple[Optional[float], Optional[float], Optional[float]]:
    """–§–µ—Ç—á–∏—Ç –≤—Å–µ —Ç—Ä–∏ –∫—É—Ä—Å–∞ –≤–∞–ª—é—Ç –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ"""
    print("üîÑ –§–µ—Ç—á–∏–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç...")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ –∑–∞–¥–∞—á–∏ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
    loop = asyncio.get_event_loop()
    
    # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏
    rub_to_byn_task = fetch_rub_to_byn()
    
    # –°–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏ —á–µ—Ä–µ–∑ run_in_executor
    usd_to_kzt_task = loop.run_in_executor(None, fetch_usd_to_kzt)
    byn_to_kzt_task = loop.run_in_executor(None, fetch_byn_to_kzt)
    
    # –ñ–¥–µ–º –≤—Å–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    results = await asyncio.gather(
        rub_to_byn_task,
        usd_to_kzt_task, 
        byn_to_kzt_task,
        return_exceptions=True
    )
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Ç–∏–ø–∏–∑–∞—Ü–∏–µ–π
    rub_to_byn: Optional[float] = results[0] if isinstance(results[0], (int, float)) else None
    usd_to_kzt: Optional[float] = results[1] if isinstance(results[1], (int, float)) else None
    byn_to_kzt: Optional[float] = results[2] if isinstance(results[2], (int, float)) else None
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –µ—Å–ª–∏ —á—Ç–æ-—Ç–æ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å
    if rub_to_byn is None:
        rub_to_byn = 3.66
        print("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è RUB/BYN: 3.66")
    
    if usd_to_kzt is None:
        usd_to_kzt = 525.0
        print("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è USD/KZT: 525.0")
    
    if byn_to_kzt is None:
        byn_to_kzt = 160.0
        print("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è BYN/KZT: 160.0")
    
    print(f"üìä –ü–æ–ª—É—á–µ–Ω–Ω—ã–µ –∫—É—Ä—Å—ã:")
    print(f"   RUB/BYN: {rub_to_byn}")
    print(f"   BYN/KZT: {byn_to_kzt}")
    print(f"   USD/KZT: {usd_to_kzt}")
    
    return rub_to_byn, byn_to_kzt, usd_to_kzt 