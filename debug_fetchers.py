import asyncio
import aiohttp
import requests
from bs4 import BeautifulSoup
import yfinance as yf
import re
from typing import Optional


async def debug_rub_to_byn():
    """–û—Ç–ª–∞–¥–∫–∞ RUB/BYN —Ñ–µ—Ç—á–µ—Ä–∞"""
    print("üîç –û—Ç–ª–∞–¥–∫–∞ RUB/BYN —Ñ–µ—Ç—á–µ—Ä–∞...")
    try:
        url = "https://www.alfabank.by/exchange/cards/"
        async with aiohttp.ClientSession() as session:
            async with session.get(url) as response:
                print(f"üì° –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: {response.status}")
                if response.status == 200:
                    html = await response.text()
                    print(f"üìÑ –†–∞–∑–º–µ—Ä HTML: {len(html)} —Å–∏–º–≤–æ–ª–æ–≤")
                    
                    soup = BeautifulSoup(html, 'html.parser')
                    
                    # –ò—â–µ–º –≤—Å–µ —Ç–∞–±–ª–∏—Ü—ã
                    tables = soup.find_all('table')
                    print(f"üìä –ù–∞–π–¥–µ–Ω–æ —Ç–∞–±–ª–∏—Ü: {len(tables)}")
                    
                    for i, table in enumerate(tables):
                        print(f"\nüìã –¢–∞–±–ª–∏—Ü–∞ {i+1}:")
                        rows = table.find_all('tr')
                        print(f"   –°—Ç—Ä–æ–∫: {len(rows)}")
                        
                        for j, row in enumerate(rows[:5]):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5 —Å—Ç—Ä–æ–∫
                            cells = row.find_all(['td', 'th'])
                            cell_texts = [cell.get_text(strip=True) for cell in cells]
                            print(f"   –°—Ç—Ä–æ–∫–∞ {j+1}: {cell_texts}")
                            
                            # –ò—â–µ–º RUB
                            if any('RUB' in text or '—Ä—É–±–ª—å' in text.lower() for text in cell_texts):
                                print(f"   ‚úÖ –ù–∞–π–¥–µ–Ω–∞ —Å—Ç—Ä–æ–∫–∞ —Å RUB –≤ —Ç–∞–±–ª–∏—Ü–µ {i+1}")
                                if len(cells) > 2:
                                    sell_text = cells[2].get_text(strip=True)
                                    print(f"   üí∞ –ó–Ω–∞—á–µ–Ω–∏–µ –ø—Ä–æ–¥–∞–∂–∏: {sell_text}")
                else:
                    print(f"‚ùå –û—à–∏–±–∫–∞ HTTP: {response.status}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")


async def debug_byn_to_kzt():
    """–û—Ç–ª–∞–¥–∫–∞ BYN/KZT —Ñ–µ—Ç—á–µ—Ä–∞"""
    print("üîç –û—Ç–ª–∞–¥–∫–∞ BYN/KZT —Ñ–µ—Ç—á–µ—Ä–∞...")
    try:
        # –ü–æ–ø—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —Ç–∏–∫–µ—Ä—ã
        tickers = ["BYNKZT=X", "BYNKZT", "BYN-KZT"]
        
        for ticker in tickers:
            print(f"üìà –ü—Ä–æ–±—É–µ–º —Ç–∏–∫–µ—Ä: {ticker}")
            try:
                ticker_obj = yf.Ticker(ticker)
                info = ticker_obj.info
                print(f"üìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–∏–∫–µ—Ä–µ: {list(info.keys())}")
                
                if 'regularMarketPrice' in info:
                    print(f"üí∞ –¶–µ–Ω–∞: {info['regularMarketPrice']}")
                    return float(info['regularMarketPrice'])
                else:
                    print("‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Ü–µ–Ω–µ")
                    
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ —Å —Ç–∏–∫–µ—Ä–æ–º {ticker}: {e}")
        
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –Ω–∏ —Å –æ–¥–Ω–∏–º —Ç–∏–∫–µ—Ä–æ–º")
        return None
        
    except Exception as e:
        print(f"‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞: {e}")
        return None


async def debug_usd_to_kzt():
    """–û—Ç–ª–∞–¥–∫–∞ USD/KZT —Ñ–µ—Ç—á–µ—Ä–∞"""
    print("üîç –û—Ç–ª–∞–¥–∫–∞ USD/KZT —Ñ–µ—Ç—á–µ—Ä–∞...")
    try:
        url = "https://fin24.kz/currency/bank/kaspi-bank"
        async with aiohttp.ClientSession() as session:
            async with session.get(url) as response:
                print(f"üì° –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: {response.status}")
                if response.status == 200:
                    html = await response.text()
                    print(f"üìÑ –†–∞–∑–º–µ—Ä HTML: {len(html)} —Å–∏–º–≤–æ–ª–æ–≤")
                    
                    soup = BeautifulSoup(html, 'html.parser')
                    
                    # –ò—â–µ–º –≤—Å–µ —Ç–∞–±–ª–∏—Ü—ã
                    tables = soup.find_all('table')
                    print(f"üìä –ù–∞–π–¥–µ–Ω–æ —Ç–∞–±–ª–∏—Ü: {len(tables)}")
                    
                    for i, table in enumerate(tables):
                        print(f"\nüìã –¢–∞–±–ª–∏—Ü–∞ {i+1}:")
                        rows = table.find_all('tr')
                        print(f"   –°—Ç—Ä–æ–∫: {len(rows)}")
                        
                        for j, row in enumerate(rows[:5]):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5 —Å—Ç—Ä–æ–∫
                            cells = row.find_all(['td', 'th'])
                            cell_texts = [cell.get_text(strip=True) for cell in cells]
                            print(f"   –°—Ç—Ä–æ–∫–∞ {j+1}: {cell_texts}")
                            
                            # –ò—â–µ–º USD
                            if any('USD' in text or '–¥–æ–ª–ª–∞—Ä' in text.lower() for text in cell_texts):
                                print(f"   ‚úÖ –ù–∞–π–¥–µ–Ω–∞ —Å—Ç—Ä–æ–∫–∞ —Å USD –≤ —Ç–∞–±–ª–∏—Ü–µ {i+1}")
                                if len(cells) > 2:
                                    sell_text = cells[2].get_text(strip=True)
                                    print(f"   üí∞ –ó–Ω–∞—á–µ–Ω–∏–µ –ø—Ä–æ–¥–∞–∂–∏: {sell_text}")
                else:
                    print(f"‚ùå –û—à–∏–±–∫–∞ HTTP: {response.status}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ—Ç–ª–∞–¥–∫–∏"""
    print("üöÄ –ó–∞–ø—É—Å–∫ –æ—Ç–ª–∞–¥–∫–∏ —Ñ–µ—Ç—á–µ—Ä–æ–≤")
    print("=" * 50)
    
    print("\n1Ô∏è‚É£ –û—Ç–ª–∞–¥–∫–∞ RUB/BYN:")
    await debug_rub_to_byn()
    
    print("\n2Ô∏è‚É£ –û—Ç–ª–∞–¥–∫–∞ BYN/KZT:")
    await debug_byn_to_kzt()
    
    print("\n3Ô∏è‚É£ –û—Ç–ª–∞–¥–∫–∞ USD/KZT:")
    await debug_usd_to_kzt()
    
    print("\nüèÅ –û—Ç–ª–∞–¥–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")


if __name__ == "__main__":
    asyncio.run(main()) 