import asyncio
import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from currency_fetcher import fetch_rub_to_byn, fetch_byn_to_kzt, fetch_usd_to_kzt, fetch_all_rates


async def test_individual_fetchers():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∫–∞–∂–¥—ã–π —Ñ–µ—Ç—á–µ—Ä –æ—Ç–¥–µ–ª—å–Ω–æ"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö —Ñ–µ—Ç—á–µ—Ä–æ–≤...")
    print("=" * 50)
    
    # –¢–µ—Å—Ç 1: RUB/BYN —Ñ–µ—Ç—á–µ—Ä
    print("\n1Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä—É–µ–º RUB/BYN —Ñ–µ—Ç—á–µ—Ä...")
    try:
        rub_to_byn = await fetch_rub_to_byn()
        if rub_to_byn:
            print(f"‚úÖ RUB/BYN —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω: {rub_to_byn}")
        else:
            print("‚ùå RUB/BYN –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ RUB/BYN: {e}")
    
    # –¢–µ—Å—Ç 2: BYN/KZT —Ñ–µ—Ç—á–µ—Ä
    print("\n2Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä—É–µ–º BYN/KZT —Ñ–µ—Ç—á–µ—Ä...")
    try:
        byn_to_kzt = await fetch_byn_to_kzt()
        if byn_to_kzt:
            print(f"‚úÖ BYN/KZT —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω: {byn_to_kzt}")
        else:
            print("‚ùå BYN/KZT –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ BYN/KZT: {e}")
    
    # –¢–µ—Å—Ç 3: USD/KZT —Ñ–µ—Ç—á–µ—Ä
    print("\n3Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä—É–µ–º USD/KZT —Ñ–µ—Ç—á–µ—Ä...")
    try:
        usd_to_kzt = await fetch_usd_to_kzt()
        if usd_to_kzt:
            print(f"‚úÖ USD/KZT —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω: {usd_to_kzt}")
        else:
            print("‚ùå USD/KZT –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ USD/KZT: {e}")


async def test_all_fetchers():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –≤—Å–µ —Ñ–µ—Ç—á–µ—Ä—ã –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ"""
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö —Ñ–µ—Ç—á–µ—Ä–æ–≤ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ...")
    print("=" * 50)
    
    try:
        rub_to_byn, byn_to_kzt, usd_to_kzt = await fetch_all_rates()
        
        print("\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:")
        print(f"   RUB/BYN: {rub_to_byn}")
        print(f"   BYN/KZT: {byn_to_kzt}")
        print(f"   USD/KZT: {usd_to_kzt}")
        
        success_count = sum(1 for rate in [rub_to_byn, byn_to_kzt, usd_to_kzt] if rate is not None)
        print(f"\n‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω–æ –∫—É—Ä—Å–æ–≤: {success_count}/3")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –≤—Å–µ—Ö —Ñ–µ—Ç—á–µ—Ä–æ–≤: {e}")


async def test_with_calculation():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ñ–µ—Ç—á–∏–Ω–≥ —Å —Ä–∞—Å—á–µ—Ç–æ–º —Ü–µ–Ω—ã"""
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å —Ä–∞—Å—á–µ—Ç–æ–º —Ü–µ–Ω—ã...")
    print("=" * 50)
    
    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ —Ä–∞—Å—á–µ—Ç–∞
    from db import summarize, rounded_sum
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    test_amount = 100.0  # USD
    
    try:
        # –§–µ—Ç—á–∏–º –∫—É—Ä—Å—ã
        rub_to_byn, byn_to_kzt, usd_to_kzt = await fetch_all_rates()
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –≤ db.py
        import db
        if usd_to_kzt is not None:
            db.usd_to_kzt = usd_to_kzt
        if byn_to_kzt is not None:
            db.byn_to_kzt = byn_to_kzt
        if rub_to_byn is not None:
            db.rub_to_byn = rub_to_byn
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ü–µ–Ω—É
        calculated_price = summarize(test_amount)
        if calculated_price:
            final_price = rounded_sum(calculated_price)
            
            print(f"\nüí∞ –†–∞—Å—á–µ—Ç —Ü–µ–Ω—ã –¥–ª—è {test_amount} USD:")
            print(f"   –†–∞—Å—Å—á–∏—Ç–∞–Ω–Ω–∞—è —Ü–µ–Ω–∞: {calculated_price}")
            print(f"   –û–∫—Ä—É–≥–ª–µ–Ω–Ω–∞—è —Ü–µ–Ω–∞: {final_price}")
            
            if final_price:
                print(f"‚úÖ –§–∏–Ω–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞: {final_price} RUB")
            else:
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–∫—Ä—É–≥–ª–∏—Ç—å —Ü–µ–Ω—É")
        else:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å —Ü–µ–Ω—É")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ä–∞—Å—á–µ—Ç–∞: {e}")


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ —Ñ–µ—Ç—á–µ—Ä–æ–≤ –∫—É—Ä—Å–æ–≤ –≤–∞–ª—é—Ç")
    print("=" * 50)
    
    # –¢–µ—Å—Ç 1: –û—Ç–¥–µ–ª—å–Ω—ã–µ —Ñ–µ—Ç—á–µ—Ä—ã
    await test_individual_fetchers()
    
    # –¢–µ—Å—Ç 2: –í—Å–µ —Ñ–µ—Ç—á–µ—Ä—ã –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ
    await test_all_fetchers()
    
    # –¢–µ—Å—Ç 3: –° —Ä–∞—Å—á–µ—Ç–æ–º —Ü–µ–Ω—ã
    await test_with_calculation()
    
    print("\nüèÅ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")


if __name__ == "__main__":
    asyncio.run(main()) 