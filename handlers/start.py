from aiogram import Router
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.utils.keyboard import ReplyKeyboardBuilder
import logging

from db import get_order, update_order, get_all_orders, create_order
from states import OrderStates
from config import KEY, ADMIN_ID, KEY_SEND
import random

router = Router()
logger = logging.getLogger(__name__)

@router.message(Command("start"))
async def start_handler(message: Message, state: FSMContext):
    logger.info(f"üì• –ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /start –æ—Ç {message.from_user.id if message.from_user else 'unknown'}")
    args = message.text.split() if message.text else []
    if len(args) > 1 and args[1].startswith("order_"):
        order_id = args[1].split("_")[1]
        order = await get_order(order_id)
        if order:
            await state.update_data(order_id=order_id)
            await message.answer(
                f"–ó–∞—è–≤–∫–∞ #{order_id}\n–°—É–º–º–∞: ${order['amount']}\n–°–µ—Ä–≤–∏—Å: {order['service']}", reply_markup=ReplyKeyboardRemove()
            )
            await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:")
            await state.set_state(OrderStates.waiting_for_name)
            return

    keyboard = ReplyKeyboardBuilder()
    keyboard.button(text="üìù –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞")
    keyboard.button(text="üì¶ –°—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏")
    keyboard.button(text="‚ùì –ü–æ–º–æ—â—å")
    await message.answer(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ AltPay! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=keyboard.as_markup(resize_keyboard=True)
    )
    logger.info(f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω –æ—Ç–≤–µ—Ç –Ω–∞ /start")

@router.message(Command("new"))
async def new_command(message: Message, state: FSMContext):
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="Spotify"), KeyboardButton(text="Netflix")],
            [KeyboardButton(text="iCloud"), KeyboardButton(text="Apple")],
            [KeyboardButton(text="Google"), KeyboardButton(text="YouTube")],
            [KeyboardButton(text="Notion"), KeyboardButton(text="GitHub")],
            [KeyboardButton(text="Steam"), KeyboardButton(text="Epic Games")],
            [KeyboardButton(text="PlayStation"), KeyboardButton(text="–î–æ–º–µ–Ω—ã –∏ —Ö–æ—Å—Ç–∏–Ω–≥")],
            [KeyboardButton(text="AWS"), KeyboardButton(text="Upwork")],
            [KeyboardButton(text="ChatGPT"), KeyboardButton(text="Cursor")],
            [KeyboardButton(text="Claude"), KeyboardButton(text="Udemy")],
            [KeyboardButton(text="Adobe"), KeyboardButton(text="–ü–µ—Ä–µ–≤–æ–¥—ã")]
        ],
        resize_keyboard=True
    )
    await message.answer(
        "üßæ –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞.\n\n"
        "–î–ª—è –æ–∑–Ω–∞–∫–æ–º–ª–µ–Ω–∏—è —Å —Ü–µ–Ω–æ–π –≤—ã –º–æ–∂–µ—Ç–µ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –Ω–∞—à–∏–º –æ–Ω–ª–∞–π–Ω –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–æ–º http://alt.lovig.in/#calculator \n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —á—Ç–æ –Ω—É–∂–Ω–æ –æ–ø–ª–∞—Ç–∏—Ç—å –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ", reply_markup=keyboard
    )
    orderid = str(int(1000 + random.random() * 89999))
    await state.update_data(order_id=orderid)
    await state.set_state(OrderStates.waiting_for_service)

@router.message(Command("status"))
async def status_command(message: Message):
    logger.info(f"üì• –ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /status –æ—Ç {message.from_user.id if message.from_user else 'unknown'}")
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≤–∞—à–µ–π –∑–∞—è–≤–∫–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞:", reply_markup=ReplyKeyboardRemove())
    logger.info(f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω –æ—Ç–≤–µ—Ç –Ω–∞ /status")

@router.message(Command("help"))
async def help_command(message: Message):
    logger.info(f"üì• –ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /help –æ—Ç {message.from_user.id if message.from_user else 'unknown'}")
    keyboard = ReplyKeyboardBuilder()
    keyboard.button(text="–ü–æ–∑–≤–∞—Ç—å –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞")
    await message.answer(
        "üõ† AltPay Bot ‚Äî –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –æ–ø–ª–∞—Ç—ã –∑–∞—Ä—É–±–µ–∂–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤.\n\n"
        "üîπ /new ‚Äî —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∑–∞—è–≤–∫—É\n"
        "üîπ /status ‚Äî –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏\n"
        "–ü–æ–¥—Ä–æ–±–Ω–µ–µ: https://altpay.lovigin.com",
        reply_markup=keyboard.as_markup(resize_keyboard=True)
    )
    logger.info(f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω –æ—Ç–≤–µ—Ç –Ω–∞ /help")

@router.message(lambda msg: msg.text == "–ü–æ–∑–≤–∞—Ç—å –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞")
async def ask_for_help__person_command(message: Message):
    logger.info(f"üì• –ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /person –æ—Ç {message.from_user.id if message.from_user else 'unknown'}")

    await message.bot.send_message(
        chat_id=ADMIN_ID,
        text=(
            f"‚ÄºÔ∏è –ù—É–∂–µ–Ω –æ–ø–µ—Ä–∞—Ç–æ—Ä –≤ —á–∞—Ç {message.chat.id}"
        )
    )

    await message.answer(
        "–û–ø–µ—Ä–∞—Ç–æ—Ä —Å–∫–æ—Ä–æ –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è.\n\n"
        "–ú—ã –∏–∑-–∑–∞ –≤—Å–µ—Ö —Å–∏–ª —Ç–æ—Ä–æ–ø–∏–º—Å—è –æ—Ç–≤–µ—á–∞—Ç—å –±—ã—Å—Ç—Ä–æ ü´∂",
        reply_markup=ReplyKeyboardRemove()
    )
    logger.info(f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω –æ—Ç–≤–µ—Ç –Ω–∞ /person")

@router.message(Command(KEY))
async def fetch_orders(message: Message):
    logger.info(f"üì• –ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /key –æ—Ç {message.from_user.id if message.from_user else 'unknown'}")
    data = await get_all_orders()
    text = "\n\n".join(
        [f"#{o['_id']} ‚Ä¢ ${o.get('amount')} ‚Ä¢ {o.get('service')} ‚Ä¢ {o.get('name')} ‚Ä¢ {o.get('method')} ‚Ä¢ {o.get('contact')} ‚Ä¢ {o.get('status')}" for o in data]
    ) or "–ù–µ—Ç –∑–∞—è–≤–æ–∫."
    await message.answer(text)
    logger.info(f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω –æ—Ç–≤–µ—Ç –Ω–∞ /key")

@router.message(Command(KEY_SEND))
async def send_message(message: Message, state: FSMContext):
    logger.info(f"üì• –ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /key_send –æ—Ç {message.from_user.id if message.from_user else 'unknown'}")
    await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ chat id: ")
    await state.set_state(OrderStates.waiting_for_sender_name)

@router.message(OrderStates.waiting_for_sender_name)
async def get_name(message: Message, state: FSMContext):
    logger.info(f"üì• –ü–æ–ª—É—á–µ–Ω chat id {message.from_user.id if message.from_user else 'unknown'}: {message.text}")
    await state.update_data(chat_id=message.text)
    await message.answer("–°–æ–æ–±—â–µ–Ω–∏–µ: ")
    await state.set_state(OrderStates.waiting_for_message)

@router.message(OrderStates.waiting_for_message)
async def get_name(message: Message, state: FSMContext):
    logger.info(f"üì• –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ {message.from_user.id if message.from_user else 'unknown'}: {message.text}")
    data = await state.get_data()
    await message.bot.send_message(
        chat_id=data["chat_id"],
        text=(message.text if message.text else ""),
    )
    await message.answer("–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ. –í–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é /start")
    await state.clear()

@router.message(OrderStates.waiting_for_service)
async def get_name(message: Message, state: FSMContext):
    logger.info(f"üì• –ü–æ–ª—É—á–µ–Ω–∞ —É—Å–ª—É–≥–∞ {message.from_user.id if message.from_user else 'unknown'}: {message.text}")
    await state.update_data(service=message.text)
    await message.answer("–£–∫–∞–∂–∏—Ç–µ —Ü–µ–Ω—É –≤ –¥–æ–ª–ª–∞—Ä–∞—Ö", reply_markup=ReplyKeyboardRemove())
    await state.set_state(OrderStates.waiting_for_amount)

@router.message(OrderStates.waiting_for_amount)
async def get_name(message: Message, state: FSMContext):
    logger.info(f"üì• –ü–æ–ª—É—á–µ–Ω–∞ —Ü–µ–Ω–∞ {message.from_user.id if message.from_user else 'unknown'}: {message.text}")
    data = await state.get_data()
    if to_float(message.text) is not None:
        await create_order(order_id=data['order_id'], amount=float(message.text), service=data['service'])
        await message.answer(
            f"–ó–∞—è–≤–∫–∞ #{data['order_id']}\n–°—É–º–º–∞: ${message.text}\n–°–µ—Ä–≤–∏—Å: {data['service']}", reply_markup=ReplyKeyboardRemove()
        )
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:")
        await state.set_state(OrderStates.waiting_for_name)
    else:
        await message.answer("–ù–∞–ø–∏—à–∏—Ç–µ —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ –±–µ–∑ –≤–∞–ª—é—Ç—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä 44.6)")
        await state.set_state(OrderStates.waiting_for_amount)

@router.message(OrderStates.waiting_for_name)
async def get_name(message: Message, state: FSMContext):
    logger.info(f"üì• –ü–æ–ª—É—á–µ–Ω–æ –∏–º—è –æ—Ç {message.from_user.id if message.from_user else 'unknown'}: {message.text}")
    data = await state.get_data()
    await update_order(data["order_id"], {
        "name": message.text,
        "chatid": message.chat.id
    })
    keyboard = ReplyKeyboardBuilder()
    keyboard.button(text="‚úÖ –ï—Å—Ç—å")
    keyboard.button(text="‚ùå –ù–µ—Ç, –Ω–∞–¥–æ —Å–æ–∑–¥–∞—Ç—å")
    await message.answer("–ï—Å—Ç—å –ª–∏ —É –í–∞—Å —É–∂–µ –∞–∫–∫–∞—É–Ω—Ç, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ —Å–æ–≤–µ—Ä—à–∏—Ç—å –æ–ø–ª–∞—Ç—É?", reply_markup=keyboard.as_markup(resize_keyboard=True))
    await state.set_state(OrderStates.waiting_for_account_existing)

@router.message(OrderStates.waiting_for_account_existing)
async def account_exist(message: Message, state: FSMContext):
    logger.info(f"üì• –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ –Ω–∞–ª–∏—á–∏–∏ –∞–∫–∫–∞—É–Ω—Ç–∞ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id if message.from_user else 'unknown'}: {message.text}")
    data = await state.get_data()

    if message.text == "‚úÖ –ï—Å—Ç—å":
        await update_order(data["order_id"], {"account_exist": True})
        await message.answer("–ù–∞–ø–∏—à–∏—Ç–µ –ª–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å –∫ –∞–∫–∫–∞—É–Ω—Ç—É: ", reply_markup=ReplyKeyboardRemove())
        await state.set_state(OrderStates.waiting_for_account_info)
    else:
        await update_order(data["order_id"], {
            "account_exist": False,
            "account_info": "–ù—É–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å"
        })
        await message.answer("–°–µ–π—á–∞—Å –º–æ–∂–µ—Ç–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –ª—é–±—ã–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –∏–ª–∏ –ø–æ–∂–µ–ª–∞–Ω–∏—è: ", reply_markup=ReplyKeyboardRemove())
        await state.set_state(OrderStates.waiting_for_additional_info)

@router.message(OrderStates.waiting_for_account_info)
async def account_info(message: Message, state: FSMContext):
    logger.info(f"üì• –ü–æ–ª—É—á–µ–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞–∫–∫–∞—É–Ω—Ç–µ {message.from_user.id if message.from_user else 'unknown'}: {message.text}")
    data = await state.get_data()

    await update_order(data["order_id"], {"account_info": message.text})
    await message.answer("–°–µ–π—á–∞—Å –º–æ–∂–µ—Ç–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –ª—é–±—ã–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –∏–ª–∏ –ø–æ–∂–µ–ª–∞–Ω–∏—è: ", reply_markup=ReplyKeyboardRemove())
    await state.set_state(OrderStates.waiting_for_additional_info)

@router.message(OrderStates.waiting_for_additional_info)
async def account_info(message: Message, state: FSMContext):
    logger.info(f"üì• –ü–æ–ª—É—á–µ–Ω—ã –¥–æ–ø –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ {message.from_user.id if message.from_user else 'unknown'}: {message.text}")
    data = await state.get_data()

    await update_order(data["order_id"], {"instructions": message.text})

    keyboard = ReplyKeyboardBuilder()
    keyboard.button(text="üí≥ –ö–∞—Ä—Ç–∞")
    keyboard.button(text="üßæ –°–ë–ü")
    keyboard.button(text="‚Çø –ö—Ä–∏–ø—Ç–∞")
    await message.answer("–£–∫–∞–∂–∏—Ç–µ —É–¥–æ–±–Ω—ã–π —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã (–∫–∞—Ä—Ç–∞, –°–ë–ü, SWIFT):", reply_markup=keyboard.as_markup(resize_keyboard=True))

    await state.set_state(OrderStates.waiting_for_payment_method)

@router.message(OrderStates.waiting_for_payment_method)
async def get_method(message: Message, state: FSMContext):
    logger.info(f"üì• –ü–æ–ª—É—á–µ–Ω —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã –æ—Ç {message.from_user.id if message.from_user else 'unknown'}: {message.text}")
    data = await state.get_data()
    await update_order(data["order_id"], {"method": message.text})
    contact_button = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üì± –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç", request_contact=True)]
        ],
        resize_keyboard=True,
        one_time_keyboard=True
    )

    await message.answer("–û—Å—Ç–∞–≤—å—Ç–µ Telegram –∏–ª–∏ email –¥–ª—è —Å–≤—è–∑–∏:", reply_markup=contact_button)
    await state.set_state(OrderStates.waiting_for_contact)

@router.message(OrderStates.waiting_for_contact)
async def get_contact(message: Message, state: FSMContext):
    if message.contact:
        contact = message.contact.phone_number
    else:
        contact = message.text  # –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ—Å—Ç–æ –≤–≤–µ–ª email –∏–ª–∏ –Ω–∏–∫ –≤—Ä—É—á–Ω—É—é

    logger.info(f"üì• –ü–æ–ª—É—á–µ–Ω –∫–æ–Ω—Ç–∞–∫—Ç –æ—Ç {message.from_user.id if message.from_user else 'unknown'}: {message.contact}")
    data = await state.get_data()
    order = await get_order(data["order_id"])
    await update_order(data["order_id"], {
        "contact": contact,
        "status": "–í –æ–±—Ä–∞–±–æ—Ç–∫–µ"
    })
    keyboard = ReplyKeyboardBuilder()
    keyboard.button(text="üìù –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞")
    keyboard.button(text="üì¶ –°—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏")
    keyboard.button(text="‚ùì –ü–æ–º–æ—â—å")
    summary = (
        "–°–ø–∞—Å–∏–±–æ! –ó–∞—è–≤–∫–∞ –ø–µ—Ä–µ–¥–∞–Ω–∞ –≤ –æ–±—Ä–∞–±–æ—Ç–∫—É. –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.\n"
        f"üßæ –ó–∞—è–≤–∫–∞ #{data["order_id"]}\n"
        f"–°–µ—Ä–≤–∏—Å: {order['service']}\n"
        f"–¶–µ–Ω–∞: ${order['amount']}\n"
        f"–ò–º—è: {order.get('name') or '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
        f"–ù–∞–ª–∏—á–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞: {order.get('account_exist') or '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
        f"–î–æ—Å—Ç—É–ø –∫ –∞–∫–∫–∞—É–Ω—Ç—É: {order.get('account_info') or '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
        f"–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏: {order.get('instructions') or '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
        f"–ú–µ—Ç–æ–¥ –æ–ø–ª–∞—Ç—ã: {order.get('method') or '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
        f"–°—É–º–º–∞: {order.get('price') or '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'} —Ä—É–±.\n"
        f"–ö–æ–Ω—Ç–∞–∫—Ç: {contact or '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
    )
    await message.answer(summary, reply_markup=keyboard.as_markup(resize_keyboard=True))

    await message.bot.send_message(
        chat_id=ADMIN_ID,
        text=(
            f"üßæ –ó–∞—è–≤–∫–∞ #{data["order_id"]}\n"
            f"–°–µ—Ä–≤–∏—Å: {order['service']}\n"
            f"–¶–µ–Ω–∞: ${order['amount']}\n"
            f"–ò–º—è: {order.get('name') or '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
            f"–ù–∞–ª–∏—á–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞: {order.get('account_exist') or '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
            f"–î–æ—Å—Ç—É–ø –∫ –∞–∫–∫–∞—É–Ω—Ç—É: {order.get('account_info') or '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
            f"–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏: {order.get('instructions') or '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
            f"–ú–µ—Ç–æ–¥ –æ–ø–ª–∞—Ç—ã: {order.get('method') or '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
            f"–°—É–º–º–∞: {order.get('price') or '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'} —Ä—É–±.\n"
            f"–ö–æ–Ω—Ç–∞–∫—Ç: {contact or '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
            f"Chat id: {order.get('chatid') or '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
        )
    )

    await state.clear()

@router.message()
async def fallback_handler(message: Message):
    # –õ–æ–≥–∏—Ä—É–µ–º
    user = message.from_user
    chat_id = message.chat.id
    text = message.text or "<non-text content>"

    # –û—Ç–ø—Ä–∞–≤–∫–∞ –∞–¥–º–∏–Ω—É
    await message.bot.send_message(
        chat_id=ADMIN_ID,
        text=(
            f"üì© –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç @{user.username or '–±–µ–∑ –Ω–∏–∫–∞'}\n"
            f"üÜî Chat ID: {chat_id}\n"
            f"üí¨ –¢–µ–∫—Å—Ç: {text}"
        )
    )

def to_float(s: str) -> float | None:
    try:
        return float(s)
    except ValueError:
        return None