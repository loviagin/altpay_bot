from aiogram import Router
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.utils.keyboard import ReplyKeyboardBuilder
import logging

from db import get_order, update_order, get_all_orders
from states import OrderStates

router = Router()
logger = logging.getLogger(__name__)

@router.message(Command("start"))
async def start_handler(message: Message, state: FSMContext):
    logger.info(f"üì• –ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /start –æ—Ç {message.from_user.id if message.from_user else 'unknown'}")
    args = message.text.split() if message.text else []
    if len(args) > 1 and args[1].startswith("order_"):
        order_id = args[1].split("_")[1]
        order = await get_order(order_id)
        if order:
            await state.update_data(order_id=order_id)
            await state.update_data(service=order["service"])
            await state.update_data(price=order["price"])
            await state.update_data(amount=order["amount"])
            await message.answer(
                f"–ó–∞—è–≤–∫–∞ #{order_id}\n–°—É–º–º–∞: ${order['amount']}\n–°–µ—Ä–≤–∏—Å: {order['service']}", reply_markup=ReplyKeyboardRemove()
            )
            await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:")
            await state.set_state(OrderStates.waiting_for_name)
            return

    keyboard = ReplyKeyboardBuilder()
    keyboard.button(text="üìù –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞")
    keyboard.button(text="üì¶ –°—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏")
    keyboard.button(text="‚ùì –ü–æ–º–æ—â—å")
    await message.answer(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ AltPay! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=keyboard.as_markup(resize_keyboard=True)
    )
    logger.info(f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω –æ—Ç–≤–µ—Ç –Ω–∞ /start")

@router.message(Command("new"))
async def new_command(message: Message):
    logger.info(f"üì• –ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /new –æ—Ç {message.from_user.id if message.from_user else 'unknown'}")
    await message.answer("–î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π –∑–∞—è–≤–∫–∏ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ https://altpay.lovigin.com")
    logger.info(f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω –æ—Ç–≤–µ—Ç –Ω–∞ /new")

@router.message(Command("status"))
async def status_command(message: Message):
    logger.info(f"üì• –ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /status –æ—Ç {message.from_user.id if message.from_user else 'unknown'}")
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≤–∞—à–µ–π –∑–∞—è–≤–∫–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞:", reply_markup=ReplyKeyboardRemove())
    logger.info(f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω –æ—Ç–≤–µ—Ç –Ω–∞ /status")

@router.message(Command("help"))
async def help_command(message: Message):
    logger.info(f"üì• –ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /help –æ—Ç {message.from_user.id if message.from_user else 'unknown'}")
    keyboard = ReplyKeyboardBuilder()
    keyboard.button(text="–ü–æ–∑–≤–∞—Ç—å –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞")
    await message.answer(
        "üõ† AltPay Bot ‚Äî –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –æ–ø–ª–∞—Ç—ã –∑–∞—Ä—É–±–µ–∂–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤.\n\n"
        "üîπ /new ‚Äî —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∑–∞—è–≤–∫—É\n"
        "üîπ /status ‚Äî –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏\n"
        "–ü–æ–¥—Ä–æ–±–Ω–µ–µ: https://altpay.lovigin.com",
        reply_markup=keyboard.as_markup(resize_keyboard=True)
    )
    logger.info(f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω –æ—Ç–≤–µ—Ç –Ω–∞ /help")

@router.message(Command("key"))
async def fetch_orders(message: Message):
    logger.info(f"üì• –ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /key –æ—Ç {message.from_user.id if message.from_user else 'unknown'}")
    data = await get_all_orders()
    text = "\n\n".join(
        [f"#{o['_id']} ‚Ä¢ ${o.get('amount')} ‚Ä¢ {o.get('service')} ‚Ä¢ {o.get('name')} ‚Ä¢ {o.get('method')} ‚Ä¢ {o.get('contact')} ‚Ä¢ {o.get('status')}" for o in data]
    ) or "–ù–µ—Ç –∑–∞—è–≤–æ–∫."
    await message.answer(text)
    logger.info(f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω –æ—Ç–≤–µ—Ç –Ω–∞ /key")

@router.message(OrderStates.waiting_for_name)
async def get_name(message: Message, state: FSMContext):
    logger.info(f"üì• –ü–æ–ª—É—á–µ–Ω–æ –∏–º—è –æ—Ç {message.from_user.id if message.from_user else 'unknown'}: {message.text}")
    data = await state.get_data()
    await update_order(data["order_id"], {"name": message.text})
    keyboard = ReplyKeyboardBuilder()
    keyboard.button(text="‚úÖ –ï—Å—Ç—å")
    keyboard.button(text="‚ùå –ù–µ—Ç, –Ω–∞–¥–æ —Å–æ–∑–¥–∞—Ç—å")
    await message.answer("–ï—Å—Ç—å –ª–∏ —É –í–∞—Å —É–∂–µ –∞–∫–∫–∞—É–Ω—Ç, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ —Å–æ–≤–µ—Ä—à–∏—Ç—å –æ–ø–ª–∞—Ç—É?", reply_markup=keyboard.as_markup(resize_keyboard=True))
    await state.set_state(OrderStates.waiting_for_account_existing)

@router.message(OrderStates.waiting_for_account_existing)
async def account_exist(message: Message, state: FSMContext):
    logger.info(f"üì• –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ –Ω–∞–ª–∏—á–∏–∏ –∞–∫–∫–∞—É–Ω—Ç–∞ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id if message.from_user else 'unknown'}: {message.text}")
    data = await state.get_data()

    if message.text == "‚úÖ –ï—Å—Ç—å":
        await update_order(data["order_id"], {"account_exist": True})
        await message.answer("–ù–∞–ø–∏—à–∏—Ç–µ –ª–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å –∫ –∞–∫–∫–∞—É–Ω—Ç—É: ", reply_markup=ReplyKeyboardRemove())
        await state.set_state(OrderStates.waiting_for_account_info)
    else:
        await update_order(data["order_id"], {"account_exist": False})
        await update_order(data["order_id"], {"account_info": "–ù—É–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å"})
        await message.answer("–°–µ–π—á–∞—Å –º–æ–∂–µ—Ç–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –ª—é–±—ã–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –∏–ª–∏ –ø–æ–∂–µ–ª–∞–Ω–∏—è: ", reply_markup=ReplyKeyboardRemove())
        await state.set_state(OrderStates.waiting_for_additional_info)

@router.message(OrderStates.waiting_for_account_info)
async def account_info(message: Message, state: FSMContext):
    logger.info(f"üì• –ü–æ–ª—É—á–µ–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞–∫–∫–∞—É–Ω—Ç–µ {message.from_user.id if message.from_user else 'unknown'}: {message.text}")
    data = await state.get_data()

    await update_order(data["order_id"], {"account_info": message.text})
    await message.answer("–°–µ–π—á–∞—Å –º–æ–∂–µ—Ç–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –ª—é–±—ã–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –∏–ª–∏ –ø–æ–∂–µ–ª–∞–Ω–∏—è: ", reply_markup=ReplyKeyboardRemove())
    await state.set_state(OrderStates.waiting_for_additional_info)

@router.message(OrderStates.waiting_for_additional_info)
async def account_info(message: Message, state: FSMContext):
    logger.info(f"üì• –ü–æ–ª—É—á–µ–Ω—ã –¥–æ–ø –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ {message.from_user.id if message.from_user else 'unknown'}: {message.text}")
    data = await state.get_data()

    await update_order(data["order_id"], {"instructions": message.text})

    keyboard = ReplyKeyboardBuilder()
    keyboard.button(text="üí≥ –ö–∞—Ä—Ç–∞")
    keyboard.button(text="üßæ –°–ë–ü")
    keyboard.button(text="‚Çø –ö—Ä–∏–ø—Ç–∞")
    await message.answer("–£–∫–∞–∂–∏—Ç–µ —É–¥–æ–±–Ω—ã–π —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã (–∫–∞—Ä—Ç–∞, –°–ë–ü, SWIFT):", reply_markup=keyboard.as_markup(resize_keyboard=True))

    await state.set_state(OrderStates.waiting_for_payment_method)

@router.message(OrderStates.waiting_for_payment_method)
async def get_method(message: Message, state: FSMContext):
    logger.info(f"üì• –ü–æ–ª—É—á–µ–Ω —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã –æ—Ç {message.from_user.id if message.from_user else 'unknown'}: {message.text}")
    data = await state.get_data()
    await update_order(data["order_id"], {"method": message.text})
    contact_button = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üì± –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç", request_contact=True)]
        ],
        resize_keyboard=True,
        one_time_keyboard=True
    )

    await message.answer("–û—Å—Ç–∞–≤—å—Ç–µ Telegram –∏–ª–∏ email –¥–ª—è —Å–≤—è–∑–∏:", reply_markup=contact_button)
    await state.set_state(OrderStates.waiting_for_contact)

@router.message(OrderStates.waiting_for_contact)
async def get_contact(message: Message, state: FSMContext):
    logger.info(f"üì• –ü–æ–ª—É—á–µ–Ω –∫–æ–Ω—Ç–∞–∫—Ç –æ—Ç {message.from_user.id if message.from_user else 'unknown'}: {message.text}")
    data = await state.get_data()
    await update_order(data["order_id"], {
        "contact": message.text,
        "status": "–í –æ–±—Ä–∞–±–æ—Ç–∫–µ"
    })
    keyboard = ReplyKeyboardBuilder()
    keyboard.button(text="üìù –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞")
    keyboard.button(text="üì¶ –°—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏")
    keyboard.button(text="‚ùì –ü–æ–º–æ—â—å")
    summary = (
        "–°–ø–∞—Å–∏–±–æ! –ó–∞—è–≤–∫–∞ –ø–µ—Ä–µ–¥–∞–Ω–∞ –≤ –æ–±—Ä–∞–±–æ—Ç–∫—É. –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.\n"
        f"üßæ –ó–∞—è–≤–∫–∞ #{data["order_id"]}\n"
        f"–°–µ—Ä–≤–∏—Å: {data['service']}\n"
        f"–¶–µ–Ω–∞: ${data['amount']}\n"
        f"–ò–º—è: {data.get('name') or '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
        f"–ù–∞–ª–∏—á–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞: {data.get('account_exist') or '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
        f"–î–æ—Å—Ç—É–ø –∫ –∞–∫–∫–∞—É–Ω—Ç—É: {data.get('account_info') or '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
        f"–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏: {data.get('instructions') or '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
        f"–ú–µ—Ç–æ–¥ –æ–ø–ª–∞—Ç—ã: {data.get('method') or '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
        f"–°—É–º–º–∞: {data.get('price') or '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'} —Ä—É–±.\n"
        f"–ö–æ–Ω—Ç–∞–∫—Ç: {data.get('contact') or '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
    )
    await message.answer(summary, reply_markup=keyboard.as_markup(resize_keyboard=True))
    await state.clear()